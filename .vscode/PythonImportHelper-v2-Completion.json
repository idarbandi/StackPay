[
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "redis",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Order",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "redis",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "redis",
        "importPath": "inventory.main",
        "description": "inventory.main",
        "isExtraImport": true,
        "detail": "inventory.main",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "BackgroundTasks",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "HashModel",
        "importPath": "redis_om",
        "description": "redis_om",
        "isExtraImport": true,
        "detail": "redis_om",
        "documentation": {}
    },
    {
        "label": "get_redis_connection",
        "importPath": "redis_om",
        "description": "redis_om",
        "isExtraImport": true,
        "detail": "redis_om",
        "documentation": {}
    },
    {
        "label": "HashModel",
        "importPath": "redis_om",
        "description": "redis_om",
        "isExtraImport": true,
        "detail": "redis_om",
        "documentation": {}
    },
    {
        "label": "NotFoundError",
        "importPath": "redis_om",
        "description": "redis_om",
        "isExtraImport": true,
        "detail": "redis_om",
        "documentation": {}
    },
    {
        "label": "get_redis_connection",
        "importPath": "redis_om",
        "description": "redis_om",
        "isExtraImport": true,
        "detail": "redis_om",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "starlette.requests",
        "description": "starlette.requests",
        "isExtraImport": true,
        "detail": "starlette.requests",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 5,
        "importPath": "inventory.consumer",
        "description": "inventory.consumer",
        "peekOfCode": "key = 'order_completed'\ngroup = 'inventory_group'\ntry:\n    redis.xgroup_create(key, group)\nexcept:\n    print('Group Already Exists')\nwhile True:\n    try:\n        results = redis.xreadgroup(group, key, {key: '>'}, None)\n        if results != []:",
        "detail": "inventory.consumer",
        "documentation": {}
    },
    {
        "label": "group",
        "kind": 5,
        "importPath": "inventory.consumer",
        "description": "inventory.consumer",
        "peekOfCode": "group = 'inventory_group'\ntry:\n    redis.xgroup_create(key, group)\nexcept:\n    print('Group Already Exists')\nwhile True:\n    try:\n        results = redis.xreadgroup(group, key, {key: '>'}, None)\n        if results != []:\n            for result in results:",
        "detail": "inventory.consumer",
        "documentation": {}
    },
    {
        "label": "ProductRequest",
        "kind": 6,
        "importPath": "inventory.main",
        "description": "inventory.main",
        "peekOfCode": "class ProductRequest(BaseModel):\n    name: str\n    price: int\n    quantity: int\n# Redis-OM model for storage\nclass Product(HashModel):\n    name: str\n    price: int\n    quantity: int\n    class Meta:",
        "detail": "inventory.main",
        "documentation": {}
    },
    {
        "label": "Product",
        "kind": 6,
        "importPath": "inventory.main",
        "description": "inventory.main",
        "peekOfCode": "class Product(HashModel):\n    name: str\n    price: int\n    quantity: int\n    class Meta:\n        database = redis\n@app.get('/products')\ndef all():\n    logger.info(\"Fetching all product keys\")\n    try:",
        "detail": "inventory.main",
        "documentation": {}
    },
    {
        "label": "all",
        "kind": 2,
        "importPath": "inventory.main",
        "description": "inventory.main",
        "peekOfCode": "def all():\n    logger.info(\"Fetching all product keys\")\n    try:\n        return [format(pk) for pk in Product.all_pks()]\n    except Exception as e:\n        logger.error(f\"Error fetching products: {e}\")\n        raise HTTPException(status_code=500, detail=\"Error fetching products\")\ndef format(pk: str):\n    product = Product.get(pk=pk)\n    return {",
        "detail": "inventory.main",
        "documentation": {}
    },
    {
        "label": "format",
        "kind": 2,
        "importPath": "inventory.main",
        "description": "inventory.main",
        "peekOfCode": "def format(pk: str):\n    product = Product.get(pk=pk)\n    return {\n        \"id\": product.pk,\n        \"name\": product.name,\n        \"price\": product.price,\n        \"quantity\": product.quantity\n    }\n@app.get('/products/{pk}')\ndef single(pk: str):",
        "detail": "inventory.main",
        "documentation": {}
    },
    {
        "label": "single",
        "kind": 2,
        "importPath": "inventory.main",
        "description": "inventory.main",
        "peekOfCode": "def single(pk: str):\n    return Product.get(pk)\n@app.delete('/products/{pk}')\ndef delete(pk: str):\n    return Product.delete(pk)\n@app.post('/products/')\nasync def create(product_request: ProductRequest):\n    try:\n        logger.info(f\"Creating product: {product_request}\")\n        product = Product(**product_request.dict())",
        "detail": "inventory.main",
        "documentation": {}
    },
    {
        "label": "delete",
        "kind": 2,
        "importPath": "inventory.main",
        "description": "inventory.main",
        "peekOfCode": "def delete(pk: str):\n    return Product.delete(pk)\n@app.post('/products/')\nasync def create(product_request: ProductRequest):\n    try:\n        logger.info(f\"Creating product: {product_request}\")\n        product = Product(**product_request.dict())\n        return product.save()\n    except Exception as e:\n        logger.error(f\"Unexpected error: {e}\")",
        "detail": "inventory.main",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "inventory.main",
        "description": "inventory.main",
        "peekOfCode": "logger = logging.getLogger(__name__)\napp = FastAPI()\n# CORS configuration\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=['*'],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n    expose_headers=[\"*\"],",
        "detail": "inventory.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "inventory.main",
        "description": "inventory.main",
        "peekOfCode": "app = FastAPI()\n# CORS configuration\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=['*'],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n    expose_headers=[\"*\"],\n    max_age=3600,",
        "detail": "inventory.main",
        "documentation": {}
    },
    {
        "label": "redis",
        "kind": 5,
        "importPath": "inventory.main",
        "description": "inventory.main",
        "peekOfCode": "redis = get_redis_connection(\n    host='localhost', port=6379, password=None, decode_responses=True)\n# Pydantic model for request validation\nclass ProductRequest(BaseModel):\n    name: str\n    price: int\n    quantity: int\n# Redis-OM model for storage\nclass Product(HashModel):\n    name: str",
        "detail": "inventory.main",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 5,
        "importPath": "payments.consumer",
        "description": "payments.consumer",
        "peekOfCode": "key = 'refund_order'\ngroup = 'payment_group'\ntry:\n    redis.xgroup_create(key, group)\nexcept:\n    print('Group Already Exists')\nwhile True:\n    try:\n        results = redis.xreadgroup(group, key, {key: '>'}, None)\n        if results != []:",
        "detail": "payments.consumer",
        "documentation": {}
    },
    {
        "label": "group",
        "kind": 5,
        "importPath": "payments.consumer",
        "description": "payments.consumer",
        "peekOfCode": "group = 'payment_group'\ntry:\n    redis.xgroup_create(key, group)\nexcept:\n    print('Group Already Exists')\nwhile True:\n    try:\n        results = redis.xreadgroup(group, key, {key: '>'}, None)\n        if results != []:\n            for result in results:",
        "detail": "payments.consumer",
        "documentation": {}
    },
    {
        "label": "OrderRequest",
        "kind": 6,
        "importPath": "payments.main",
        "description": "payments.main",
        "peekOfCode": "class OrderRequest(BaseModel):\n    product_id: str\n    quantity: int\n# Redis-OM model for storage\nclass Order(HashModel):\n    product_id: str\n    price: float\n    fee: float\n    total: float\n    quantity: int",
        "detail": "payments.main",
        "documentation": {}
    },
    {
        "label": "Order",
        "kind": 6,
        "importPath": "payments.main",
        "description": "payments.main",
        "peekOfCode": "class Order(HashModel):\n    product_id: str\n    price: float\n    fee: float\n    total: float\n    quantity: int\n    status: str  # pending, complete, refunded\n    class Meta:\n        database = redis\n@app.get(\"/orders/\")",
        "detail": "payments.main",
        "documentation": {}
    },
    {
        "label": "get_all",
        "kind": 2,
        "importPath": "payments.main",
        "description": "payments.main",
        "peekOfCode": "def get_all():\n    return Order.all_pks()\n@app.get('/orders/{pk}')\ndef get_order(pk: str):\n    try:\n        return Order.get(pk)\n    except NotFoundError:\n        raise HTTPException(status_code=404, detail=\"Order not found\")\n    except Exception as e:\n        logger.error(f\"Unexpected error: {e}\")",
        "detail": "payments.main",
        "documentation": {}
    },
    {
        "label": "get_order",
        "kind": 2,
        "importPath": "payments.main",
        "description": "payments.main",
        "peekOfCode": "def get_order(pk: str):\n    try:\n        return Order.get(pk)\n    except NotFoundError:\n        raise HTTPException(status_code=404, detail=\"Order not found\")\n    except Exception as e:\n        logger.error(f\"Unexpected error: {e}\")\n        raise HTTPException(status_code=500, detail=\"Internal Server Error\")\n@app.post('/orders')\nasync def create_order(request: OrderRequest, background_tasks: BackgroundTasks):",
        "detail": "payments.main",
        "documentation": {}
    },
    {
        "label": "order_created",
        "kind": 2,
        "importPath": "payments.main",
        "description": "payments.main",
        "peekOfCode": "def order_created(order: Order):\n    time.sleep(5)\n    order.status = 'completed'\n    order.save()\n    redis.xadd('order_completed', order.dict(), '*')",
        "detail": "payments.main",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "payments.main",
        "description": "payments.main",
        "peekOfCode": "logger = logging.getLogger(__name__)\napp = FastAPI()\n# CORS configuration\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=['*'],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n    expose_headers=[\"*\"],",
        "detail": "payments.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "payments.main",
        "description": "payments.main",
        "peekOfCode": "app = FastAPI()\n# CORS configuration\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=['*'],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n    expose_headers=[\"*\"],\n    max_age=3600,",
        "detail": "payments.main",
        "documentation": {}
    },
    {
        "label": "redis",
        "kind": 5,
        "importPath": "payments.main",
        "description": "payments.main",
        "peekOfCode": "redis = get_redis_connection(\n    host='localhost', port=6379, password=None, decode_responses=True\n)\n# Pydantic model for request validation\nclass OrderRequest(BaseModel):\n    product_id: str\n    quantity: int\n# Redis-OM model for storage\nclass Order(HashModel):\n    product_id: str",
        "detail": "payments.main",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    }
]